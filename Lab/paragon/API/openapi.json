{
  "openapi": "3.0.3",
  "info": {
    "title": "API Authentication",
    "description": "Authentication covers how to login (authenticate against the API endpoint) and get the privileges, against which organization(s) and site(s) the admin is granted to.",
    "version": "1.0.0",
    "contact": {}
  },
  "servers": [
    {
      "url": "{{scheme}}{{host}}"
    }
  ],
  "paths": {
    "/api/v1/self": {
      "get": {
        "tags": [
          "API Token"
        ],
        "summary": "AuthorizeUsingAPIToken",
        "description": "To use API token, add a Authorization header when making an API request like the following:\n\n```\nAuthorization: Token <key>\nGET /api/v1/self\n\n ```",
        "operationId": "authorizeusingapitoken",
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/v1/self/apitokens": {
      "get": {
        "tags": [
          "API Token"
        ],
        "summary": "ListAPITokens",
        "description": "**Description:**\n\nThis API retrieves a list of all active API tokens associated with the authenticated user account. It allows users to view their current API tokens for authentication and access management.\n\n**Authentication:**\n\n- **Type:** Basic Authentication\n    \n- **Username:**\n    \n- **Password:**\n    \n\n**Response:**\n\n- A JSON array containing details of all active API tokens, including token ID, creation date, and expiration details.",
        "operationId": "listapitokens",
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "API Token"
        ],
        "summary": "CreateAPIToken",
        "description": "This API generates a new API token for the authenticated user. The token can be used for authentication in future API requests. **Note:** The token key is only available at creation time and cannot be retrieved later.\n\n**Authentication:**\n\n- **Type:** Basic Authentication\n    \n- **Username:**\n    \n- **Password:**\n    \n\n**Response Fields:**\n\n- **`id`** _(string)_ – Unique identifier for the API token.\n    \n- **`last_used`** _(timestamp or null)_ – Indicates the last time the token was used. Initially `null`.\n    \n- **`key`** _(string)_ – The actual API token key (only visible at creation time).\n    \n- **`created_time`** _(timestamp)_ – The timestamp representing the creation time of the token.",
        "operationId": "createapitoken",
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/api/v1/self/apitokens/{{apitoken_id}}": {
      "delete": {
        "tags": [
          "API Token"
        ],
        "summary": "DeleteAPIToken",
        "description": "This API deletes a specific API token associated with the authenticated user. Once deleted, the token can no longer be used for authentication.\n\n**Authentication:**\n\n- **Type:** Basic Authentication\n    \n- **Username:**\n    \n- **Password:**\n    \n\n**Path Variable:**\n\n- **`{{apitoken_id}}`** _(string)_ – The unique identifier of the API token to be deleted.",
        "operationId": "deleteapitoken",
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "parameters": [
        {
          "name": "apitoken_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    },
    "/api/v1/orgs/stats": {
      "get": {
        "tags": [
          "Basic Login"
        ],
        "summary": "AuthorizeFromClient",
        "description": "This section covers user authentication methods, including Basic Authentication and JSON-based login. Users can authenticate using their credentials to generate an API token or establish a session for secure API access.",
        "operationId": "authorizefromclient",
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/api/v1/login": {
      "post": {
        "tags": [
          "Basic Login"
        ],
        "summary": "AuthorizeUsingPayload",
        "description": "Authenticates a user by sending login credentials in the request body. This will return session id and csrf token in response, which can be included in the request headers to authorize future API requests.",
        "operationId": "authorizeusingpayload",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "noreply@juniper.net"
                  },
                  "password": {
                    "type": "string",
                    "example": "********"
                  }
                }
              },
              "examples": {
                "AuthorizeUsingPayload": {
                  "value": {
                    "email": "noreply@juniper.net",
                    "password": "********"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/mems/api/v1.1alpha/{org_id}/devices": {
      "get": {
        "tags": [
          "CSRF Token"
        ],
        "summary": "AuthorizeUsingCSRF",
        "description": "Generate a CSRF token by validating user credentials. Once the CSRF token is obtained from response, it must be included in the request headers to authorize API token creation securely.",
        "operationId": "authorizeusingcsrf",
        "parameters": [
          {
            "name": "x-csrftoken",
            "in": "header",
            "schema": {
              "type": "string",
              "example": "{{csrf_token}}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      },
      "parameters": [
        {
          "name": "org_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ]
    }
  },
  "components": {
    "securitySchemes": {
      "basicAuth": {
        "type": "http",
        "scheme": "basic"
      }
    }
  },
  "tags": [
    {
      "name": "API Token",
      "description": "Like many other API providers, it’s also possible to generate API Tokens to be used (in HTTP Header) for authentication. An API token ties to a Admin with equal or less privileges. **Format**: API Token value format is `Token {apitoken}`\n\n**Notes**:\n\n- an API token generated for a specific admin has the same privilege as the user\n    \n- an API token will be automatically removed if not used for > 90 days\n    \n- SSO admins cannot generate these API tokens. Refer Org level API tokens which can have privileges of a specific Org/Site for more information."
    },
    {
      "name": "Basic Login"
    },
    {
      "name": "CSRF Token",
      "description": "This protects the website against Cross Site Request Forgery, all the POST / PUT / DELETE APIs needs to have CSRF token in the Request header when using Login/Password authentication. The CSRF Token is sent back in the Cookies from the Login Response API Call. The token is used to prevent cross-site request forgery (CSRF) attacks.\n\nThis section describes how to authenticate using a CSRF token to enhance security during API requests."
    }
  ]
}